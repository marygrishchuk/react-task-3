{"version":3,"sources":["components/ValueSetter/ValueSetter.module.css","components/InputForm/InputForm.module.css","components/Display/Display.module.css","components/Counter/Counter.module.css","components/Button/Button.module.css","serviceWorker.ts","components/InputForm/InputForm.tsx","components/Button/Button.tsx","components/ValueSetter/ValueSetter.tsx","components/Display/Display.tsx","components/Counter/Counter.tsx","App.tsx","index.tsx"],"names":["module","exports","Boolean","window","location","hostname","match","InputForm","props","inputClassName","error","s","incorrectValue","className","input","title","type","value","inputDigit","onChange","e","Number","currentTarget","Button","btn","disabled","onClick","changeDigit","undefined","displayedDigit","startValue","onSetButtonClick","ValueSetter","valueSetterWrapper","inputBlock","maxValue","onValueChange","btnBlock","disabledSet","Display","digitClassName","counterStop","counter","Counter","counterWrapper","disabledInc","App","useState","localStorage","getItem","setStartValue","setMaxValue","setError","setDisabledInc","setDisabledSet","setDisplayedDigit","settingMode","setSettingMode","useEffect","setItem","toString","disableButton","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.148c3cfc.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"valueSetterWrapper\":\"ValueSetter_valueSetterWrapper__irPVg\",\"inputBlock\":\"ValueSetter_inputBlock__3Q--m\",\"btnBlock\":\"ValueSetter_btnBlock__1F52C\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"input\":\"InputForm_input__2xDrQ\",\"incorrectValue\":\"InputForm_incorrectValue__3BqFG\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"counter\":\"Display_counter__3fg3n\",\"prompt\":\"Display_prompt__eO4cT\",\"error\":\"Display_error__1m-lA\",\"counterStop\":\"Display_counterStop__l4NmT\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"counterWrapper\":\"Counter_counterWrapper__2umnS\",\"btnBlock\":\"Counter_btnBlock__SPUJx\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"btn\":\"Button_btn__xy6if\"};","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App2 is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React, {ChangeEvent} from \"react\";\r\nimport s from './InputForm.module.css';\r\n\r\ntype PropsType = {\r\n    inputDigit: number\r\n    title: string\r\n    onChange: (inputDigit: number, title: string) => void\r\n    error: boolean\r\n}\r\n\r\nexport function InputForm(props: PropsType) {\r\n\r\n    const onDigitInput = (e: ChangeEvent<HTMLInputElement>) => {\r\n        let input = Number(e.currentTarget.value)\r\n        props.onChange(input, props.title)\r\n    }\r\n\r\n    let inputClassName = props.error ? s.incorrectValue : \"\"\r\n\r\n    return (\r\n        <div className={s.input}>\r\n            <label>{props.title}<input className={inputClassName} type={\"number\"} value={props.inputDigit} onChange={onDigitInput}/></label>\r\n        </div>\r\n    )\r\n}","import React from \"react\";\r\nimport s from './Button.module.css';\r\n\r\ntype PropsType = {\r\n    title: \"inc\" | \"reset\" | \"set\"\r\n    disabled?: boolean\r\n    startValue?: number\r\n    displayedDigit?: number\r\n    changeDigit?: (displayedDigit: number) => void\r\n    onSetButtonClick?: () => void\r\n}\r\n\r\nexport function Button(props: PropsType) {\r\n\r\n    let onClickHandler = () => {\r\n        if (props.title === \"inc\") {\r\n            props.changeDigit && props.displayedDigit !== undefined\r\n            && props.changeDigit(props.displayedDigit + 1)\r\n        } else if (props.title === \"reset\") {\r\n            props.changeDigit && props.startValue !== undefined\r\n            && props.changeDigit(props.startValue)\r\n        } else if (props.title === \"set\") {\r\n            props.onSetButtonClick                //if props.onSetButtonClick is defined\r\n            && props.onSetButtonClick()\r\n        }\r\n    }\r\n\r\n    return (\r\n        <button className={s.btn} disabled={props.disabled} onClick={onClickHandler}>\r\n            {props.title}\r\n        </button>\r\n    )\r\n}","import {InputForm} from \"../InputForm/InputForm\";\r\nimport {Button} from \"../Button/Button\";\r\nimport React from \"react\";\r\nimport s from \"./ValueSetter.module.css\";\r\n\r\ntype ValueSetterType = {\r\n    startValue: number\r\n    maxValue: number\r\n    error: boolean\r\n    onValueChange: (inputDigit: number, title: string) => void\r\n    disabledSet: boolean\r\n    onSetButtonClick?: () => void\r\n\r\n}\r\n\r\nexport const ValueSetter = (props: ValueSetterType) => {\r\n    return (\r\n        <div className={s.valueSetterWrapper}>\r\n            <div className={s.inputBlock}>\r\n                <InputForm title={\"max value:\"} inputDigit={props.maxValue} onChange={props.onValueChange} error={props.error}/>\r\n                <InputForm title={\"start value:\"} inputDigit={props.startValue} onChange={props.onValueChange}\r\n                           error={props.error}/>\r\n            </div>\r\n            <div className={s.btnBlock}>\r\n                <Button title={\"set\"}\r\n                        disabled={props.disabledSet}\r\n                        onSetButtonClick={props.onSetButtonClick}/>\r\n            </div>\r\n        </div>\r\n    )\r\n}","import React from \"react\";\r\nimport s from './Display.module.css';\r\n\r\ntype PropsType = {\r\n    displayedDigit: number\r\n    maxValue: number\r\n}\r\n\r\nexport function Display(props: PropsType) {\r\n\r\n    let digitClassName = props.displayedDigit === props.maxValue ? s.counterStop : s.counter\r\n\r\n    return (\r\n        <div className={digitClassName}>\r\n            {props.displayedDigit}\r\n        </div>\r\n    )\r\n}","import React from \"react\"\r\nimport {Button} from \"../Button/Button\";\r\nimport {Display} from \"../Display/Display\";\r\nimport s from \"./Counter.module.css\";\r\n\r\ntype CounterType = {\r\n    displayedDigit: number\r\n    startValue: number\r\n    maxValue: number\r\n    disabledInc: boolean\r\n    disabledSet: boolean\r\n    changeDigit: (displayedDigit: number) => void\r\n    onSetButtonClick: () => void\r\n}\r\n\r\nexport const Counter = (props: CounterType) => {\r\n    return (\r\n        <div className={s.counterWrapper}>\r\n            <Display displayedDigit={props.displayedDigit} maxValue={props.maxValue} />\r\n            <div className={s.btnBlock}>\r\n                <Button title={\"inc\"} disabled={props.disabledInc} changeDigit={props.changeDigit}\r\n                        displayedDigit={props.displayedDigit}/>\r\n                <Button title={\"reset\"} changeDigit={props.changeDigit} startValue={props.startValue}/>\r\n                <Button title={\"set\"}\r\n                        disabled={props.disabledSet}\r\n                        onSetButtonClick={props.onSetButtonClick}/>\r\n            </div>\r\n        </div>\r\n    )\r\n}","import React, {useEffect, useState} from 'react';\r\nimport './App.css';\r\nimport {ValueSetter} from \"./components/ValueSetter/ValueSetter\";\r\nimport {Counter} from \"./components/Counter/Counter\";\r\n\r\nfunction App() {\r\n\r\n\r\n    let [startValue, setStartValue] = useState<number>(Number(localStorage.getItem(\"startValue\")) || 0)\r\n    let [maxValue, setMaxValue] = useState<number>(Number(localStorage.getItem(\"maxValue\")) || 5)\r\n    let [error, setError] = useState<boolean>(false)\r\n    let [disabledInc, setDisabledInc] = useState<boolean>(false)\r\n    let [disabledSet, setDisabledSet] = useState<boolean>(false)\r\n    let [displayedDigit, setDisplayedDigit] = useState<number>(startValue)\r\n    let [settingMode, setSettingMode] = useState<boolean>(false)\r\n\r\n    useEffect(() => {\r\n        localStorage.setItem(\"startValue\", startValue.toString())\r\n        localStorage.setItem(\"maxValue\", maxValue.toString())\r\n    }, [startValue, maxValue])\r\n\r\n    function onValueChange(inputDigit: number, title: string) {\r\n        if (title === \"start value:\") {\r\n            startValue = inputDigit\r\n            setStartValue(startValue)\r\n        } else if (title === \"max value:\") {\r\n            maxValue = inputDigit\r\n            setMaxValue(maxValue)\r\n        }\r\n        changePrompt()\r\n    }\r\n\r\n    function changePrompt() {\r\n        if (startValue < 0 || maxValue <= startValue) {\r\n            setDisabledSet(true)\r\n            setError(true)\r\n        } else {\r\n            setDisabledSet(false)\r\n            setError(false)\r\n        }\r\n    }\r\n\r\n    function onSetButtonClick() {\r\n        setSettingMode(!settingMode)\r\n        setDisplayedDigit(startValue)\r\n    }\r\n\r\n    function changeDigit(displayedDigit: number) {\r\n        setDisplayedDigit(displayedDigit)\r\n        disableButton(displayedDigit)\r\n    }\r\n\r\n    function disableButton(displayedDigit: number) {\r\n        if (displayedDigit === maxValue) {\r\n            setDisabledInc(true)\r\n        } else if (displayedDigit === startValue) {\r\n            setDisabledInc(false)\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className={\"app-wrapper\"}>\r\n            { settingMode\r\n            ? <ValueSetter\r\n                maxValue={maxValue}\r\n                startValue={startValue}\r\n                onValueChange={onValueChange}\r\n                error={error}\r\n                disabledSet={disabledSet}\r\n                onSetButtonClick={onSetButtonClick}/>\r\n            : <Counter\r\n                displayedDigit={displayedDigit}\r\n                startValue={startValue}\r\n                maxValue={maxValue}\r\n                disabledInc={disabledInc}\r\n                disabledSet={disabledSet}\r\n                onSetButtonClick={onSetButtonClick}\r\n                changeDigit={changeDigit}/> }\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport App from './App';\r\n\r\nReactDOM.render(<App />,  document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}